"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  commonJsTemplate: () => commonJsTemplate,
  escapeRegex: () => escapeRegex,
  getCachedPolyfillContent: () => getCachedPolyfillContent,
  getCachedPolyfillPath: () => getCachedPolyfillPath,
  nodeModulesPolyfillPlugin: () => nodeModulesPolyfillPlugin
});
module.exports = __toCommonJS(src_exports);

// src/lib/utils/util.ts
var import_modern_node_polyfills = require("modern-node-polyfills");
var escapeRegex = /* @__PURE__ */ __name((str) => {
  return str.replace(/[$()*+.?[\\\]^{|}]/g, "\\$&").replace(/-/g, "\\x2d");
}, "escapeRegex");
var commonJsTemplate = /* @__PURE__ */ __name(({ importPath }) => {
  return `
const polyfill = require('${importPath}')
if (polyfill && polyfill.default) {
    module.exports = polyfill.default
    for (let k in polyfill) {
        module.exports[k] = polyfill[k]
    }
} else if (polyfill)  {
    module.exports = polyfill
}
`;
}, "commonJsTemplate");
var normalizeNodeBuiltinPath = /* @__PURE__ */ __name((path2) => {
  return path2.replace(/^node:/, "").replace(/\/$/, "");
}, "normalizeNodeBuiltinPath");
var polyfillPathCache = /* @__PURE__ */ new Map();
var getCachedPolyfillPath = /* @__PURE__ */ __name((_importPath) => {
  const normalizedImportPath = normalizeNodeBuiltinPath(_importPath);
  const cachedPromise = polyfillPathCache.get(normalizedImportPath);
  if (cachedPromise) {
    return cachedPromise;
  }
  const promise = (0, import_modern_node_polyfills.polyfillPath)(normalizedImportPath);
  polyfillPathCache.set(normalizedImportPath, promise);
  return promise;
}, "getCachedPolyfillPath");
var polyfillContentAndTransform = /* @__PURE__ */ __name(async (importPath) => {
  const content = await (0, import_modern_node_polyfills.polyfillContent)(importPath);
  return content.replace(/eval\(/g, "(0,eval)(");
}, "polyfillContentAndTransform");
var polyfillContentCache = /* @__PURE__ */ new Map();
var getCachedPolyfillContent = /* @__PURE__ */ __name((_importPath) => {
  const normalizedImportPath = normalizeNodeBuiltinPath(_importPath);
  const cachedPromise = polyfillContentCache.get(normalizedImportPath);
  if (cachedPromise) {
    return cachedPromise;
  }
  const promise = polyfillContentAndTransform(normalizedImportPath);
  polyfillContentCache.set(normalizedImportPath, promise);
  return promise;
}, "getCachedPolyfillContent");

// src/lib/plugin.ts
var import_node_module = require("module");
var import_node_path = __toESM(require("path"));
var NAME = "node-modules-polyfills";
var loader = /* @__PURE__ */ __name(async (args) => {
  try {
    const isCommonjs = args.namespace.endsWith("commonjs");
    const resolved = await getCachedPolyfillPath(args.path);
    const resolveDir = import_node_path.default.dirname(resolved);
    if (isCommonjs) {
      return {
        loader: "js",
        contents: commonJsTemplate({
          importPath: args.path
        }),
        resolveDir
      };
    }
    const contents = await getCachedPolyfillContent(args.path);
    return {
      loader: "js",
      contents,
      resolveDir
    };
  } catch (error) {
    console.error("node-modules-polyfill", error);
    return {
      contents: `export {}`,
      loader: "js"
    };
  }
}, "loader");
var nodeModulesPolyfillPlugin = /* @__PURE__ */ __name((options = {}) => {
  const { namespace = NAME, name = NAME } = options;
  if (namespace.endsWith("commonjs")) {
    throw new Error(`namespace ${namespace} must not end with commonjs`);
  }
  const commonjsNamespace = `${namespace}-commonjs`;
  return {
    name,
    setup: ({ onLoad, onResolve, initialOptions }) => {
      if (initialOptions.define && !initialOptions.define.global) {
        initialOptions.define.global = "globalThis";
      } else if (!initialOptions.define) {
        initialOptions.define = { global: "globalThis" };
      }
      onLoad({ filter: /.*/, namespace }, loader);
      onLoad({ filter: /.*/, namespace: commonjsNamespace }, loader);
      const filter = new RegExp(`(?:node:)?${import_node_module.builtinModules.map(escapeRegex).join("|")}`);
      const resolver = /* @__PURE__ */ __name(async (args) => {
        const ignoreRequire = args.namespace === commonjsNamespace;
        const pollyfill = await getCachedPolyfillPath(args.path).catch(() => null);
        if (!pollyfill) {
          return;
        }
        const isCommonjs = !ignoreRequire && args.kind === "require-call";
        return {
          namespace: isCommonjs ? commonjsNamespace : namespace,
          path: args.path
        };
      }, "resolver");
      onResolve({ filter }, resolver);
    }
  };
}, "nodeModulesPolyfillPlugin");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  commonJsTemplate,
  escapeRegex,
  getCachedPolyfillContent,
  getCachedPolyfillPath,
  nodeModulesPolyfillPlugin
});
//# sourceMappingURL=index.js.map