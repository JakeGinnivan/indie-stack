{"version":3,"sources":["../src/lib/utils/util.ts","../src/lib/plugin.ts"],"sourcesContent":["/* eslint-disable unicorn/prefer-string-replace-all -- node v14 doesn't supports string.replaceAll*/\nimport { polyfillContent, polyfillPath } from 'modern-node-polyfills';\n\nexport const escapeRegex = (str: string) => {\n\treturn str.replace(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n};\n\nexport const commonJsTemplate = ({ importPath }: { importPath: string }) => {\n\treturn `\nconst polyfill = require('${importPath}')\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n`;\n};\n\nconst normalizeNodeBuiltinPath = (path: string) => {\n\treturn path.replace(/^node:/, '').replace(/\\/$/, '');\n};\n\nconst polyfillPathCache: Map<string, Promise<string>> = new Map();\nexport const getCachedPolyfillPath = (_importPath: string): Promise<string> => {\n\tconst normalizedImportPath = normalizeNodeBuiltinPath(_importPath);\n\n\tconst cachedPromise = polyfillPathCache.get(normalizedImportPath);\n\tif (cachedPromise) {\n\t\treturn cachedPromise;\n\t}\n\n\tconst promise = polyfillPath(normalizedImportPath);\n\tpolyfillPathCache.set(normalizedImportPath, promise);\n\treturn promise;\n};\n\nconst polyfillContentAndTransform = async (importPath: string) => {\n\tconst content = await polyfillContent(importPath);\n\treturn content.replace(/eval\\(/g, '(0,eval)(');\n};\n\nconst polyfillContentCache: Map<string, Promise<string>> = new Map();\nexport const getCachedPolyfillContent = (_importPath: string): Promise<string> => {\n\tconst normalizedImportPath = normalizeNodeBuiltinPath(_importPath);\n\n\tconst cachedPromise = polyfillContentCache.get(normalizedImportPath);\n\tif (cachedPromise) {\n\t\treturn cachedPromise;\n\t}\n\n\tconst promise = polyfillContentAndTransform(normalizedImportPath);\n\tpolyfillContentCache.set(normalizedImportPath, promise);\n\treturn promise;\n};\n","import { builtinModules } from 'node:module';\nimport path from 'node:path';\n\nimport { escapeRegex, commonJsTemplate, getCachedPolyfillPath, getCachedPolyfillContent } from './utils/util.js';\n\nimport type { OnResolveArgs, Plugin } from 'esbuild';\nimport type esbuild from 'esbuild';\n\nconst NAME = 'node-modules-polyfills';\n\nexport interface NodePolyfillsOptions {\n\tname?: string;\n\tnamespace?: string;\n}\n\nconst loader = async (args: esbuild.OnLoadArgs): Promise<esbuild.OnLoadResult> => {\n\ttry {\n\t\tconst isCommonjs = args.namespace.endsWith('commonjs');\n\n\t\tconst resolved = await getCachedPolyfillPath(args.path);\n\t\tconst resolveDir = path.dirname(resolved);\n\n\t\tif (isCommonjs) {\n\t\t\treturn {\n\t\t\t\tloader: 'js',\n\t\t\t\tcontents: commonJsTemplate({\n\t\t\t\t\timportPath: args.path,\n\t\t\t\t}),\n\t\t\t\tresolveDir,\n\t\t\t};\n\t\t}\n\n\t\tconst contents = await getCachedPolyfillContent(args.path);\n\n\t\treturn {\n\t\t\tloader: 'js',\n\t\t\tcontents,\n\t\t\tresolveDir,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error('node-modules-polyfill', error);\n\t\treturn {\n\t\t\tcontents: `export {}`,\n\t\t\tloader: 'js',\n\t\t};\n\t}\n};\n\nexport const nodeModulesPolyfillPlugin = (options: NodePolyfillsOptions = {}): Plugin => {\n\tconst { namespace = NAME, name = NAME } = options;\n\tif (namespace.endsWith('commonjs')) {\n\t\tthrow new Error(`namespace ${namespace} must not end with commonjs`);\n\t}\n\n\tconst commonjsNamespace = `${namespace}-commonjs`;\n\n\treturn {\n\t\tname,\n\t\tsetup: ({ onLoad, onResolve, initialOptions }) => {\n\t\t\t// polyfills contain global keyword, it must be defined\n\t\t\tif (initialOptions.define && !initialOptions.define.global) {\n\t\t\t\tinitialOptions.define.global = 'globalThis';\n\t\t\t} else if (!initialOptions.define) {\n\t\t\t\tinitialOptions.define = { global: 'globalThis' };\n\t\t\t}\n\n\t\t\tonLoad({ filter: /.*/, namespace }, loader);\n\t\t\tonLoad({ filter: /.*/, namespace: commonjsNamespace }, loader);\n\t\t\tconst filter = new RegExp(`(?:node:)?${builtinModules.map(escapeRegex).join('|')}`);\n\t\t\tconst resolver = async (args: OnResolveArgs) => {\n\t\t\t\tconst ignoreRequire = args.namespace === commonjsNamespace;\n\n\t\t\t\tconst pollyfill = await getCachedPolyfillPath(args.path).catch(() => null);\n\n\t\t\t\tif (!pollyfill) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isCommonjs = !ignoreRequire && args.kind === 'require-call';\n\n\t\t\t\treturn {\n\t\t\t\t\tnamespace: isCommonjs ? commonjsNamespace : namespace,\n\t\t\t\t\tpath: args.path,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tonResolve({ filter }, resolver);\n\t\t},\n\t};\n};\n"],"mappings":"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","names":["path"]}